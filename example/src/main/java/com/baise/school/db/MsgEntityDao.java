package com.baise.school.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.baise.school.data.entity.MsgEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MSG_ENTITY".
*/
public class MsgEntityDao extends AbstractDao<MsgEntity, Long> {

    public static final String TABLENAME = "MSG_ENTITY";

    /**
     * Properties of entity MsgEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property FromUser = new Property(1, String.class, "fromUser", false, "FROM_USER");
        public final static Property ToUser = new Property(2, String.class, "toUser", false, "TO_USER");
        public final static Property Type = new Property(3, int.class, "type", false, "TYPE");
        public final static Property Content = new Property(4, String.class, "content", false, "CONTENT");
        public final static Property Date = new Property(5, String.class, "date", false, "DATE");
        public final static Property IsReaded = new Property(6, String.class, "isReaded", false, "IS_READED");
        public final static Property Jsoninfo = new Property(7, String.class, "jsoninfo", false, "JSONINFO");
    }


    public MsgEntityDao(DaoConfig config) {
        super(config);
    }
    
    public MsgEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MSG_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"FROM_USER\" TEXT," + // 1: fromUser
                "\"TO_USER\" TEXT," + // 2: toUser
                "\"TYPE\" INTEGER NOT NULL ," + // 3: type
                "\"CONTENT\" TEXT," + // 4: content
                "\"DATE\" TEXT," + // 5: date
                "\"IS_READED\" TEXT," + // 6: isReaded
                "\"JSONINFO\" TEXT);"); // 7: jsoninfo
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MSG_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MsgEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String fromUser = entity.getFromUser();
        if (fromUser != null) {
            stmt.bindString(2, fromUser);
        }
 
        String toUser = entity.getToUser();
        if (toUser != null) {
            stmt.bindString(3, toUser);
        }
        stmt.bindLong(4, entity.getType());
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(5, content);
        }
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(6, date);
        }
 
        String isReaded = entity.getIsReaded();
        if (isReaded != null) {
            stmt.bindString(7, isReaded);
        }
 
        String jsoninfo = entity.getJsoninfo();
        if (jsoninfo != null) {
            stmt.bindString(8, jsoninfo);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MsgEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String fromUser = entity.getFromUser();
        if (fromUser != null) {
            stmt.bindString(2, fromUser);
        }
 
        String toUser = entity.getToUser();
        if (toUser != null) {
            stmt.bindString(3, toUser);
        }
        stmt.bindLong(4, entity.getType());
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(5, content);
        }
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(6, date);
        }
 
        String isReaded = entity.getIsReaded();
        if (isReaded != null) {
            stmt.bindString(7, isReaded);
        }
 
        String jsoninfo = entity.getJsoninfo();
        if (jsoninfo != null) {
            stmt.bindString(8, jsoninfo);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public MsgEntity readEntity(Cursor cursor, int offset) {
        MsgEntity entity = new MsgEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // fromUser
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // toUser
            cursor.getInt(offset + 3), // type
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // content
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // date
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // isReaded
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // jsoninfo
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MsgEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setFromUser(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setToUser(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setType(cursor.getInt(offset + 3));
        entity.setContent(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDate(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setIsReaded(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setJsoninfo(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(MsgEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(MsgEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(MsgEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
